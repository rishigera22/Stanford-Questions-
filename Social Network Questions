-- Question 1 Find the names of all students who are friends with someone named Gabriel.

SELECT name FROM highschooler
WHERE ID IN (SELECT ID1 FROM friend
WHERE ID2 IN (SELECT ID FROM highschooler
WHERE name = 'Gabriel'));

/* Question 2 For every student who likes someone 2 or more grades younger than themselves, 
return that student's name and grade, and the name and grade of the student they like*/

SELECT a.name,a.grade, b.name, b.grade
FROM likes l JOIN highschooler a 
ON l.ID1 = a.id
JOIN highschooler b
ON l.id2 = b.id

where a.grade - b.grade >=2;

/*Question 3 For every pair of students who both like each other, return the name and grade of both students. 
Include each pair only once, with the two names in alphabetical order.*/

SELECT c.name, c.grade, d.name, d.grade
FROM likes a JOIN likes b
ON a.id2 = b.id1
JOIN highschooler c
on a.id1 = c.id
JOIN highschooler d
on a.id2 = d.id

WHERE a.id1 = b.id2
AND c.name < d.name
ORDER BY c.name

/* Question 4 Find all students who do not appear in the Likes table (as a student who likes or is liked)
and return their names and grades. Sort by grade, then by name within each grade.*/

SELECT name, grade FROM highschooler 
WHERE ID NOT IN (

SELECT ID1 FROM likes
UNION
SELECT ID2 FROM likes)

order by grade, name

/* Question 5 For every situation where student A likes student B, but we have no information about whom B likes
(that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.*/

SELECT a.name, a.grade, b.name, b.grade

FROM LIKES l JOIN highschooler a
ON l.id1 = a.id
join highschooler b
ON l.id2 = b.id

WHERE l.ID2 IN (SELECT ID2 
FROM LIKES
WHERE ID2 NOT IN (SELECT ID1 FROM likes));

/* Question 6 Find names and grades of students who only have friends in the same grade.
Return the result sorted by grade, then by name within each grade */

SELECT a.name, a.grade
FROM friend f JOIN highschooler a
ON f.ID1 = a.ID
JOIN highschooler b
ON f.ID2 = b.ID
GROUP BY a.name, a.grade
HAVING MAX(a.grade - b.grade) = 0
AND MIN(a.grade - b.grade) = 0
ORDER BY a.grade, a.name

/* Question 7 For each student A who likes a student B where the two are not friends, 
find if they have a friend C in common (who can introduce them!). For all such trios, 
return the name and grade of A, B, and C.*/

SELECT h.name,h.grade, i.name,i.grade, j.name,j.grade

FROM (SELECT * FROM Likes EXCEPT SELECT * FROM Friend) a
JOIN FRIEND b ON a.id1 = b.id1
JOIN FRIEND c on a.id2 = c.id1
JOIN highschooler h on a.id1 = h.id
JOIN highschooler i on a.id2 = i.id
JOIN highschooler j on b.id2 = j.id


WHERE a.id1 <> c.id2
AND a.id2<>b.id2
AND b.id2 = c.id2;

-- Question 8 Find the difference between the number of students in the school and the number of different first names.

SELECT COUNT(name) - COUNT(distinct(name))
FROM highschooler;

-- Question 9 Find the name and grade of all students who are liked by more than one other student.

SELECT name, grade from Highschooler

where ID IN (SELECT ID2
FROM likes
GROUP BY ID2
HAVING COUNT(ID1)>1);

/* Question 10 For every situation where student A likes student B, but student B likes a different student C, 
return the names and grades of A, B, and C.*/

SELECT h.name, h.grade, i.name,i.grade, j.name, j.grade
FROM Likes a JOIN Likes b 
on a.id2 = b.id1
JOIN highschooler h
on a.id1 = h.id
JOIN highschooler i
on a.id2 = i.id
Join highschooler j
on b.id2 = j.id

WHERE a.id1 <>b.id2;

/* Question 11 Find those students for whom all of their friends are in different grades from themselves. 
Return the students' names and grades.*/

SELECT distinct a.name, a.grade FROM friend f JOIN highschooler a
on f.id1 = a.id
JOIN highschooler b
on f.id2 = b.id


WHERE a.name NOT IN (

SELECT a.name FROM friend f JOIN highschooler a
on f.id1 = a.id
JOIN highschooler b
on f.id2 = b.id
where a.grade = b.grade);

-- Question 12 What is the average number of friends per student? (Your result should be just one number.)

SELECT AVG(friendscount) FROM (

SELECT id1, COUNT(ID2) AS FRIENDSCOUNT
FROM friend
GROUP BY id1);

/* Question 13 Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. 
Do not count Cassandra, even though technically she is a friend of a friend. */

  SELECT COUNT(a.id2) FROM

(SELECT ID2 FROM friend
WHERE ID1 IN
(SELECT ID FROM highschooler
WHERE name = 'Cassandra')

UNION


SELECT ID2 FROM FRIEND WHERE ID1 IN(

SELECT ID2 FROM friend
WHERE ID1 IN
(SELECT ID FROM highschooler
WHERE name = 'Cassandra'))) a

WHERE a.id2 <> (SELECT ID FROM highschooler
WHERE name = 'Cassandra');


-- Question 14 Find the name and grade of the student(s) with the greatest number of friends.

SELECT b.name, b.grade

FROM (


SELECT id1, COUNT(ID2) AS FRIENDSCOUNT
FROM friend
GROUP BY id1
HAVING COUNT(ID2) = (SELECT MAX(FRIENDSCOUNT) FROM (
SELECT id1, COUNT(ID2) AS FRIENDSCOUNT
FROM friend
GROUP BY id1))) a JOIN highschooler b
on a.id1 = b.id;










